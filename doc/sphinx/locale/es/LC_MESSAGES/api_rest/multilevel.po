# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2019, Irontec
# This file is distributed under the same license as the IvozProvider
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
msgid ""
msgstr ""
"Project-Id-Version: IvozProvider 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-09 11:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../api_rest/multilevel.rst:3
msgid "Multi-level API"
msgstr ""

#: ../../api_rest/multilevel.rst:5
msgid ""
"IvozProvider API is divided in same three levels as the web "
"administration portal plus user API:"
msgstr ""

#: ../../api_rest/multilevel.rst:7
msgid "God"
msgstr ""

#: ../../api_rest/multilevel.rst:9
msgid "Brand"
msgstr ""

#: ../../api_rest/multilevel.rst:11
msgid "Client"
msgstr ""

#: ../../api_rest/multilevel.rst:13
msgid "User"
msgstr ""

#: ../../api_rest/multilevel.rst:15
msgid ""
"This split allows different roles with different responsibilities to be "
"integrated against it without compromising security (read, edit, update "
"or delete the data they should not)."
msgstr ""

#: ../../api_rest/multilevel.rst:18
msgid ""
"If you check out `security policies "
"<https://github.com/irontec/ivozprovider/blob/bleeding/web/rest/brand/config/api/raw/provider.yml>`_"
" (read_access_control and write_access_control attributes), youâ€™ll see "
"that we apply read filters and write validations based on user "
"information (token). One single API approach would require a complex "
"validations more prone to failure, introduce errors and require huge "
"queries that would impact the performance."
msgstr ""

#: ../../api_rest/multilevel.rst:23
msgid ""
"That is why we split it into three APIs with **impersonate mechanism** to"
" move between them. This mechanism is explained in :ref:`Use Case` "
"section."
msgstr ""

#: ../../api_rest/multilevel.rst:26
msgid ""
"In order to access to each level, **you will need a corresponding level "
"URL and credentials**:"
msgstr ""

#: ../../api_rest/multilevel.rst:29
msgid "God API access"
msgstr ""

#: ../../api_rest/multilevel.rst:30
msgid "Credentials: God credentials defined in :ref:`Main operators`."
msgstr ""

#: ../../api_rest/multilevel.rst:33
msgid "Brand API access"
msgstr ""

#: ../../api_rest/multilevel.rst:34
msgid "Credentials: Brand credentials defined in :ref:`Brand operators`."
msgstr ""

#: ../../api_rest/multilevel.rst:37
msgid "Client API access"
msgstr ""

#: ../../api_rest/multilevel.rst:38
msgid "Credentials: Client credentials defined in :ref:`Client operators`."
msgstr ""

#: ../../api_rest/multilevel.rst:41
msgid "User API access"
msgstr ""

#: ../../api_rest/multilevel.rst:42
msgid "Credentials: User credentials defined in :ref:`users`."
msgstr ""

#: ../../api_rest/multilevel.rst:44
msgid ""
"All credentials usernames are unique at brand level. This is why "
"*username + brand URL* duple is needed to identify a user (both in API "
"and in web portal)."
msgstr ""

#: ../../api_rest/multilevel.rst:47
msgid ""
"As both brand and client URLs are internally linked to the same brand "
"(client within that brand), it is also possible to access to client API "
"using a brand URL + /api/client."
msgstr ""

